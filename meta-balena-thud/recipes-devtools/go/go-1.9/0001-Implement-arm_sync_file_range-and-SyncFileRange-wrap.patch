From 453868de0eab6e4703c3207dbaf132f04eaae5d8 Mon Sep 17 00:00:00 2001
From: Andrei Gherzan <andrei@resin.io>
Date: Mon, 23 Jul 2018 14:22:49 +0100
Subject: [PATCH] Implement arm_sync_file_range and SyncFileRange wrapper for
 ARM

Signed-off-by: Andrei Gherzan <andrei@resin.io>
Upstream-status: Pending
---
 src/syscall/syscall_linux_arm.go  |  5 +++++
 src/syscall/zsyscall_linux_arm.go | 10 ++++++++++
 2 files changed, 15 insertions(+)

diff --git a/src/syscall/syscall_linux_arm.go b/src/syscall/syscall_linux_arm.go
index 5c652b2..3df042e 100644
--- a/src/syscall/syscall_linux_arm.go
+++ b/src/syscall/syscall_linux_arm.go
@@ -108,6 +108,11 @@ func Seek(fd int, offset int64, whence int) (newoffset int64, err error) {
 //sys	Ftruncate(fd int, length int64) (err error) = SYS_FTRUNCATE64

 //sys	mmap2(addr uintptr, length uintptr, prot int, flags int, fd int, pageOffset uintptr) (xaddr uintptr, err error)
+//sys	ArmSyncFileRange(fd int, flags int, off int64, n int64) (err error)
+
+func SyncFileRange(fd int, off int64, n int64, flags int) (err error) {
+	return ArmSyncFileRange(fd, flags, off, n)
+}

 func Fstatfs(fd int, buf *Statfs_t) (err error) {
 	_, _, e := Syscall(SYS_FSTATFS64, uintptr(fd), unsafe.Sizeof(*buf), uintptr(unsafe.Pointer(buf)))
diff --git a/src/syscall/zsyscall_linux_arm.go b/src/syscall/zsyscall_linux_arm.go
index 8131899..2795ffe 100644
--- a/src/syscall/zsyscall_linux_arm.go
+++ b/src/syscall/zsyscall_linux_arm.go
@@ -1673,6 +1673,16 @@ func mmap2(addr uintptr, length uintptr, prot int, flags int, fd int, pageOffset

 // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

+func ArmSyncFileRange(fd int, flags int, off int64, n int64) (err error) {
+	_, _, e1 := Syscall6(SYS_ARM_SYNC_FILE_RANGE, uintptr(fd), uintptr(flags), uintptr(off), uintptr(off>>32), uintptr(n), uintptr(n>>32))
+	if e1 != 0 {
+		err = errnoErr(e1)
+	}
+	return
+}
+
+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT
+
 func getrlimit(resource int, rlim *rlimit32) (err error) {
 	_, _, e1 := RawSyscall(SYS_GETRLIMIT, uintptr(resource), uintptr(unsafe.Pointer(rlim)), 0)
 	if e1 != 0 {
--
2.7.4

